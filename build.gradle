import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'fabric-loom' version '0.9-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
	id 'maven-publish'
}

configurations {
    shade
    compile.extendsFrom shade
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.

    // jar-in-jar isn't enough for this. Because there's some extra crappy class-loading
    // crap, it's just way easier to include the entire dogstatsd client inside the
    // plugin jar.
    shade "com.datadoghq:java-dogstatsd-client:2.10.3"
    implementation "com.datadoghq:java-dogstatsd-client:2.10.3"

    // For some reason, the native deps don't actually get picked up when we depend
    // on the dogstatsd client, so we need to manually tell gradle to include them.
    shade "com.github.jnr:jffi:1.2.23:native"
}

processResources {
	inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
    it.options.release = 16
}

java {
    withSourcesJar()
}

jar {
	from("LICENSE") {
        rename { "${it}_${project.archives_base_name}" }
    }
}

shadowJar {
    configurations = [project.configurations.shade]
    mergeServiceFiles()
}

// This task needs to be used rather than shadowJar or jar, or various problems will happen.
task remapShadowJar(type: RemapJarTask, dependsOn: tasks.shadowJar) {
    input = tasks.shadowJar.archiveFile
    addNestedDependencies = true
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
